#!/usr/bin/env python

from __future__ import print_function
import os
import sys
import csv

MIKROBUS_GPIO_STATE = {
    "UNUSED" : 0,
    "INPUT"  : 1,
    "HIGH"   : 2,
    "LOW"    : 3
}

SPI_MODE = {
    "SPI_MODE_0" : 0,
    "SPI_MODE_1" : 1,
    "SPI_MODE_2" : 2,
    "SPI_MODE_3" : 3
}

MIKROBUS_IRQ = {
    "MIKROBUS_GPIO_INT" : 1, 
    "MIKROBUS_GPIO_RST" : 2, 
    "MIKROBUS_GPIO_PWM" : 3 
}

IRQ_TYPE = {
    "IRQ_TYPE_EDGE_RISING" : 1,
    "IRQ_TYPE_EDGE_FALLING" : 2,
    "IRQ_TYPE_EDGE_BOTH" : 3,    
    "IRQ_TYPE_LEVEL_HIGH" : 4,
    "IRQ_TYPE_LEVEL_LOW" : 8
}

def generate_info(name, url, kconfig):
    r = ";\n; {}\n; {}\n; {}\n;\n".format(name.upper(), url, kconfig)
    r += "; Copyright 2020 BeagleBoard.org Foundation \n"
    r += "; Copyright 2020 Texas Instruments \n;\n\n"
    return r

def generate_header(major,minor):
    r = "[manifest-header]\n"
    r += "version-major = {}\n".format(major)
    r += "version-minor = {}\n\n".format(minor)
    return r

def generate_interface_descriptor(vsid,psid):
    r = "[interface-descriptor]\n"
    r += "vendor-string-id = {}\n".format(vsid)
    r += "product-string-id = {}\n\n".format(psid)
    return r

def generate_mikrobus_descriptor(numdev, rstgpio, pwmgpio, intgpio):
    r = "[mikrobus-descriptor]\n"
    r += "num-devices = {}\n".format(numdev)
    r += "int-gpio = {}\n".format(intgpio)
    r += "rst-gpio = {}\n".format(rstgpio)
    r += "pwm-gpio = {}\n\n".format(pwmgpio)
    return r

def generate_string_descriptor(id,string):
    r = "[string-descriptor {}]\n".format(id)
    r += "string = {}\n\n".format(string)
    return r

def generate_bundle_descriptor(id,cls):
    r = "[bundle-descriptor {}]\n".format(id)
    r += "class = {:#x}\n\n".format(cls)
    return r
def generate_cport_descriptor(id, bundle, protocol):
    r = "[cport-descriptor {}]\n".format(id)
    r += "bundle = {}\n".format(bundle)
    r += "protocol = {:#x}\n\n".format(protocol)
    return r

def generate_device_descriptor(id, driverstr, protocol, reg, irq, irq_type, mode, speed):
    r = "[device-descriptor {}]\n".format(id)
    r += "driver-string-id = {}\n".format(driverstr)
    r += "protocol = {:#x}\n".format(protocol)
    if(protocol == 2):
        r += "reg = {}\n".format(reg)
    elif(protocol == 1):        
        r += "mode = {:#x}\n".format(mode)
        r += "max-speed-hz = {}\n".format(speed)
    if(irq > 0):
        r += "irq = {}\n".format(irq)
        r += "irq-type = {:#x}\n".format(irq_type)
    r += "\n"
    return r

def main():
    with open('click_info.csv', 'r') as file:
        reader = csv.reader(file)
        for row in reader:
            if (row[0] == 'Click Board Name'):
                continue
            mnfs = ""
            mnfs += generate_info(row[0],row[1],row[3])
            mnfs += generate_header(0,1)
            mnfs += generate_interface_descriptor(1,2)
            mnfs += generate_string_descriptor(1, "MikroElektronika")
            mnfs += generate_string_descriptor(2, row[0])
            if(row[5] != "UNUSED" or row[6] != "UNUSED" or row[7] != "UNUSED"):
                mnfs+=generate_mikrobus_descriptor(1, MIKROBUS_GPIO_STATE[row[5]], MIKROBUS_GPIO_STATE[row[6]], MIKROBUS_GPIO_STATE[row[7]])
            mnfs += generate_bundle_descriptor(1, 0x0a)
            if(row[4] == "SIMPLE_SPI"):
                mnfs += generate_cport_descriptor(1, 1, 0x0b)
                mnfs += generate_device_descriptor(1, 3, 1, 0, 0, 0, SPI_MODE[row[10]], row[11])
            elif(row[4] == "SIMPLE_I2C"):
                mnfs += generate_cport_descriptor(1, 1, 0x03)
                mnfs += generate_device_descriptor(1, 3, 2, row[9], 0, 0, 0, 0)
            elif(row[4] == "SPI_IRQ"):
                mnfs += generate_cport_descriptor(1, 1, 0x02)
                mnfs += generate_cport_descriptor(2, 1, 0x0b)                                
                mnfs += generate_device_descriptor(1, 3, 1, 0, MIKROBUS_IRQ[row[12]], IRQ_TYPE[row[13]], SPI_MODE[row[10]], row[11])
            elif(row[4] == "I2C_IRQ"):
                mnfs += generate_cport_descriptor(1, 1, 0x02)
                mnfs += generate_cport_descriptor(2, 1, 0x03)
                mnfs += generate_device_descriptor(1, 3, 2, row[9], MIKROBUS_IRQ[row[12]], IRQ_TYPE[row[13]], 0, 0)
            mnfs += generate_string_descriptor(3, row[8])            
            mnfsname = "manifests/" + row[0].upper().replace(" ", "-")
            if (row[2] != "OKAY"):
                mnfsname += "-NOT-TESTED"
            with open(mnfsname + ".mnfs", 'w') as manifest_source:
                manifest_source.write(mnfs)

    

if __name__ == "__main__":
    main()