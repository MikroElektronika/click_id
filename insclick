#!/usr/bin/python
# -*- coding: utf-8 -*-

import argparse
import json
import sys
import os
import time
from shutil import copyfile

pathprefix = ''

if os.path.exists('/home/debian/manifesto/'):
    pathprefix = '/home/debian/manifesto/'


def loadclick():
    parser = \
        argparse.ArgumentParser(description='CLI for inserting Mikroe Clicks through Greybus'
                                )
    parser.add_argument('click', type=str, nargs=1,
                        help='Click name : rtc6 , weather ')
    parser.add_argument('port', type=str, nargs=1,
                        help='Mikrobus Slot number : p1 , p2 ..')
    args = parser.parse_args()
    platform = getPlatform()
    if platform == 'PB':
        if args.port[0].lower() == 'p1':
            port = 'PBP1'
            gbsim = 0
        elif args.port[0].lower() == 'p2':
            port = 'PBP2'
            gbsim = 1
        else:
            print 'PocketBeagle Supports only p1 and p2 slots'
            sys.exit(1)
    elif platform == 'BB':
        if args.port[0].lower() == 'p1':
            port = 'BBP1'
            gbsim = 0
        elif args.port[0].lower() == 'p2':
            port = 'BBP2'
            gbsim = 1
        elif args.port[0].lower() == 'p3':
            port = 'BBP3'
            gbsim = 2
        elif args.port[0].lower() == 'p4':
            port = 'BBP4'
            gbsim = 3
        else:
            print 'Beaglebone Black Supports only p1,p2,p3 and p4 slots'
            sys.exit(1)
    with open(pathprefix + 'clicks.json') as f:
        clickdatajson = json.load(f)
    clickdata = clickdatajson[args.click[0]]
    with open(pathprefix + 'pinconfig.json') as f:
        pindatajson = json.load(f)
    pindata = pindatajson[port]
    if clickdata['type'] == 'i2c':
        for pins in pindata['I2CPINS']:
            os.system('config-pin ' + pins + ' ' + pindata['I2CPINS'
                      ][pins])
        copyfile(pathprefix + 'manifests/i2c.mnfb',
        '/tmp/gbsim' + str(gbsim) + '/hotplug-module/' + args.click[0]
                     + '.mnfb')
        time.sleep(2)
        gbi2c=getGreybusResourceNo("i2c")
        if clickdata['class'] == 'ordinary':
            os.system('echo ' + clickdata['driver'] + ' '
                      + clickdata['address']
                      + ' | sudo tee /sys/class/i2c-adapter/i2c-' + gbi2c + '/new_device'
                      )
        elif clickdata['class'] == 'platform':
           os.system('config-pin ' + pindata['INTGPIO']['name'] + ' in'
                      )
           os.system('sudo modprobe mikrobus_i2c_device custom name='
                      + clickdata['driver'] + ' busno=' + gbi2c + ' address=' +
                      clickdata["address"] + ' irq_gpio=' + pindata['INTGPIO']['GPIONUM'])
    elif clickdata['type'] == 'spi':
        for pins in pindata['SPIPINS']:
            os.system('config-pin ' + pins + ' ' + pindata['SPIPINS'][pins])
        if clickdata['class'] == 'ordinary':
            copyfile(pathprefix + 'manifests/' + args.click[0] + '.mnfb'
                     , '/tmp/gbsim' + str(gbsim) + '/hotplug-module/' + args.click[0]
                     + '.mnfb')
        elif clickdata['class'] == 'display':
            os.system('config-pin ' + pindata['RSTGPIO']['name']
                      + ' gpio')
            os.system('config-pin ' + pindata['PWMGPIO']['name']
                      + ' gpio')
            os.system('config-pin ' + pindata['INTGPIO']['name'] + ' hi'
                      )
            copyfile(pathprefix + 'manifests/display.mnfb',
                     '/tmp/gbsim' + str(gbsim) + '/hotplug-module/' + args.click[0]
                     + '.mnfb')
            time.sleep(2)
            gbspi=getGreybusResourceNo("spi")
            os.system('sudo modprobe fbtft_device custom name='
                      + clickdata['driver'] + ' speed='
                      + clickdata['speed'] + ' busnum=' + gbspi
                      + ' buswidth=' + clickdata['buswidth']
                      + ' gpios=reset:' + pindata['RSTGPIO']['GPIONUM']
                      + ',dc:' + pindata['PWMGPIO']['GPIONUM']
                      + ' width=' + clickdata['width'] + ' height='
                      + clickdata['height'] + ' fps=' + clickdata['fps'
                      ])
        elif clickdata['class'] == 'platform':
            copyfile(pathprefix + 'manifests/platformspi.mnfb',
                     '/tmp/gbsim' + str(gbsim) + '/hotplug-module/' + args.click[0]
                     + '.mnfb')
            time.sleep(2)
            os.system('sudo modprobe mikrobus_spi_device custom name='
                      + clickdata['driver'] + ' busno=' + gbspi +' csno=1 irq_gpio=' 
                      + pindata['INTGPIO']['GPIONUM'] + ' max_speed=' + clickdata['speed'])
    else:
        print 'Only I2C and SPI Clicks Supported'
        sys.exit(1)
    for info in clickdata['info']:
        print info


def getPlatform():
    with open('/proc/device-tree/model', 'r') as f:
        model = f.readline()
        if model.find('PocketBeagle') != -1:
            return 'PB'
        else:
            return 'BB'
def getGreybusResourceNo(bus):
    resourcelist=[]
    if bus=="spi":
        for filename in os.listdir("/sys/class/spi_master/"):
                resourcelist.append(int(filename.replace("spi",'')))
    elif bus=="i2c":
        for filename in os.listdir("/sys/class/i2c-adapter/"):
                resourcelist.append(int(filename.replace("i2c-",'')))
    return str(sorted(resourcelist,reverse=True)[0])

if __name__ == '__main__':
    loadclick()
